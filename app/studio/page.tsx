"use client"

import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import {
  Download,
  LayoutPanelLeft,
  Sparkles,
  Text,
  ImageIcon,
  Settings,
  RotateCcw,
  SquarePen,
  Save
} from "lucide-react";
import { ComicPanel } from "@/components/studio/comic-panel";
import { ToolbarPanel } from "@/components/studio/toolbar-panel";
import { PanelLayoutSelector } from "@/components/studio/panel-layout-selector";
import { StylePreview } from "@/components/studio/style-preview";

export default function StudioPage() {
  const [prompt, setPrompt] = useState("");
  const [activeTab, setActiveTab] = useState("panels");
  const [comicStyle, setComicStyle] = useState("western");
  const [panelLayout, setPanelLayout] = useState("grid-2x2");
  const [isGenerating, setIsGenerating] = useState(false);
  const [lastSaved, setLastSaved] = useState<string | null>(null);

  // Mock panel data - in a real app, this would be generated by the AI
  const panels = [
    { id: "panel1", content: null },
    { id: "panel2", content: null },
    { id: "panel3", content: null },
    { id: "panel4", content: null }
  ];

  const comicStyles = [
    { id: "western", name: "Western", description: "Classic comic book style with bold colors and defined outlines" },
    { id: "manga", name: "Manga/Anime", description: "Japanese-inspired style with expressive characters and dynamic action" },
    { id: "children", name: "Children's", description: "Colorful, simplified style perfect for younger audiences" }
  ];

  const panelLayouts = [
    { id: "grid-2x2", name: "2x2 Grid", panels: 4 },
    { id: "grid-3x2", name: "3x2 Grid", panels: 6 },
    { id: "grid-3x3", name: "3x3 Grid", panels: 9 },
    { id: "custom", name: "Custom Layout", panels: "Variable" }
  ];

  const promptRef = useRef<HTMLTextAreaElement>(null);

  // Auto-save functionality
  useEffect(() => {
    const autoSaveInterval = setInterval(() => {
      if (prompt) {
        console.log("Auto-saving...");
        setLastSaved(new Date().toLocaleTimeString());
      }
    }, 30000); // Auto-save every 30 seconds

    return () => clearInterval(autoSaveInterval);
  }, [prompt]);

  const handleGenerate = () => {
    if (!prompt.trim()) return;
    
    setIsGenerating(true);
    
    // Simulate AI generation delay
    setTimeout(() => {
      setIsGenerating(false);
      // Here you would normally handle the response from the AI service
      console.log(`Generating comic with prompt: ${prompt}, style: ${comicStyle}, layout: ${panelLayout}`);
      setLastSaved(new Date().toLocaleTimeString());
    }, 3000);
  };

  const handleSaveManually = () => {
    console.log("Manually saving...");
    setLastSaved(new Date().toLocaleTimeString());
  };

  const handlePromptChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    setPrompt(event.target.value);
  };

  const handleStyleChange = (value: string) => {
    setComicStyle(value);
  };

  const handleLayoutChange = (layout: string) => {
    setPanelLayout(layout);
  };

  return (
    <div className="min-h-screen flex flex-col">
      <div className="flex-1 container mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-6 h-full">
          {/* Sidebar */}
          <div className="space-y-6">
            <Card className="p-4">
              <Tabs defaultValue="panels" onValueChange={setActiveTab}>
                <TabsList className="grid grid-cols-3 mb-4">
                  <TabsTrigger value="panels">
                    <LayoutPanelLeft className="h-4 w-4 mr-2" />
                    <span className="sr-only sm:not-sr-only">Panels</span>
                  </TabsTrigger>
                  <TabsTrigger value="text">
                    <Text className="h-4 w-4 mr-2" />
                    <span className="sr-only sm:not-sr-only">Text</span>
                  </TabsTrigger>
                  <TabsTrigger value="settings">
                    <Settings className="h-4 w-4 mr-2" />
                    <span className="sr-only sm:not-sr-only">Settings</span>
                  </TabsTrigger>
                </TabsList>
                
                {/* Panels Tab */}
                <TabsContent value="panels" className="space-y-4 min-h-[400px]">
                  <div className="space-y-3">
                    <Label htmlFor="prompt">AI Prompt</Label>
                    <Textarea
                      ref={promptRef}
                      id="prompt"
                      placeholder="Describe your comic scene..."
                      className="min-h-[120px] resize-none"
                      maxLength={500}
                      value={prompt}
                      onChange={handlePromptChange}
                    />
                    <div className="text-xs text-muted-foreground text-right">
                      {prompt.length}/500 characters
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <Label>Comic Style</Label>
                    <RadioGroup 
                      value={comicStyle} 
                      onValueChange={handleStyleChange}
                      className="flex flex-col space-y-2"
                    >
                      {comicStyles.map(style => (
                        <div key={style.id} className="flex items-start space-x-2">
                          <RadioGroupItem value={style.id} id={style.id} />
                          <div className="grid gap-1">
                            <Label htmlFor={style.id} className="font-medium">
                              {style.name}
                            </Label>
                            <p className="text-xs text-muted-foreground">
                              {style.description}
                            </p>
                          </div>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>
                  
                  <div className="space-y-3">
                    <Label>Panel Layout</Label>
                    <Select 
                      value={panelLayout} 
                      onValueChange={handleLayoutChange}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select layout" />
                      </SelectTrigger>
                      <SelectContent>
                        {panelLayouts.map(layout => (
                          <SelectItem key={layout.id} value={layout.id}>
                            {layout.name} ({layout.panels} panels)
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <Button 
                    className="w-full" 
                    onClick={handleGenerate}
                    disabled={!prompt.trim() || isGenerating}
                  >
                    {isGenerating ? (
                      <>
                        <Sparkles className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Sparkles className="mr-2 h-4 w-4" />
                        Generate Panels
                      </>
                    )}
                  </Button>
                </TabsContent>
                
                {/* Text Tab */}
                <TabsContent value="text" className="space-y-4 min-h-[400px]">
                  <div className="space-y-3">
                    <Label>Text Style</Label>
                    <Select defaultValue="speech">
                      <SelectTrigger>
                        <SelectValue placeholder="Select text style" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="speech">Speech Bubble</SelectItem>
                        <SelectItem value="thought">Thought Bubble</SelectItem>
                        <SelectItem value="narration">Narration Box</SelectItem>
                        <SelectItem value="effect">Sound Effect</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-3">
                    <Label>Font Size</Label>
                    <Slider defaultValue={[16]} min={8} max={36} step={1} />
                    <div className="flex justify-between text-xs text-muted-foreground">
                      <span>Small</span>
                      <span>Medium</span>
                      <span>Large</span>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <Label>Font Style</Label>
                    <Select defaultValue="comic">
                      <SelectTrigger>
                        <SelectValue placeholder="Select font" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="comic">Comic Sans</SelectItem>
                        <SelectItem value="bangers">Bangers</SelectItem>
                        <SelectItem value="luckiest">Luckiest Guy</SelectItem>
                        <SelectItem value="archivo">Archivo Black</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <Button className="w-full">
                    <Text className="mr-2 h-4 w-4" />
                    Apply Text Style
                  </Button>
                </TabsContent>
                
                {/* Settings Tab */}
                <TabsContent value="settings" className="space-y-4 min-h-[400px]">
                  <div className="space-y-3">
                    <Label>Export Quality</Label>
                    <Select defaultValue="high">
                      <SelectTrigger>
                        <SelectValue placeholder="Select quality" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="standard">Standard (72 DPI)</SelectItem>
                        <SelectItem value="high">High (150 DPI)</SelectItem>
                        <SelectItem value="print">Print (300 DPI)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-3">
                    <Label>Export Format</Label>
                    <Select defaultValue="png">
                      <SelectTrigger>
                        <SelectValue placeholder="Select format" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="png">PNG</SelectItem>
                        <SelectItem value="jpg">JPG</SelectItem>
                        <SelectItem value="pdf">PDF</SelectItem>
                        <SelectItem value="svg">SVG</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Auto-Save Interval</Label>
                    <Select defaultValue="30">
                      <SelectTrigger>
                        <SelectValue placeholder="Select interval" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="15">Every 15 seconds</SelectItem>
                        <SelectItem value="30">Every 30 seconds</SelectItem>
                        <SelectItem value="60">Every minute</SelectItem>
                        <SelectItem value="300">Every 5 minutes</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <Button className="w-full">
                    <Save className="mr-2 h-4 w-4" />
                    Save Settings
                  </Button>
                </TabsContent>
              </Tabs>
            </Card>
            
            {/* Style Preview */}
            {activeTab === "panels" && (
              <Card className="p-4">
                <div className="font-medium mb-2">Style Preview</div>
                <StylePreview style={comicStyle} />
              </Card>
            )}
            
            {/* Layout Preview */}
            {activeTab === "panels" && (
              <Card className="p-4">
                <div className="font-medium mb-2">Layout Preview</div>
                <PanelLayoutSelector 
                  layout={panelLayout} 
                  onSelectLayout={handleLayoutChange} 
                />
              </Card>
            )}
          </div>
          
          {/* Main Workspace */}
          <div className="space-y-4">
            <ToolbarPanel onSave={handleSaveManually} />
            
            <div className="bg-white dark:bg-slate-900 rounded-lg border shadow-sm p-4 min-h-[600px]">
              <div className={`grid gap-4 ${
                panelLayout === "grid-2x2" ? "grid-cols-2" :
                panelLayout === "grid-3x2" ? "grid-cols-3" :
                panelLayout === "grid-3x3" ? "grid-cols-3" : "grid-cols-2"
              }`}>
                {panels.map(panel => (
                  <ComicPanel 
                    key={panel.id} 
                    id={panel.id} 
                    content={panel.content} 
                    style={comicStyle}
                    isGenerating={isGenerating}
                  />
                ))}
              </div>
            </div>
            
            <div className="text-xs text-muted-foreground flex justify-between items-center">
              <div>
                {lastSaved ? `Last saved at ${lastSaved}` : "Not saved yet"}
              </div>
              <div className="flex space-x-2">
                <Button variant="outline" size="sm">
                  <RotateCcw className="h-4 w-4 mr-2" />
                  Undo
                </Button>
                <Button variant="outline" size="sm">
                  <Download className="h-4 w-4 mr-2" />
                  Export
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}